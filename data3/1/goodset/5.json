{"nodes": [{"string": " return __x ;", "links": [], "variables": ["__x"], "ids": [], "nodeId": 0, "featuresSelf": ["return"], "operators": [], "constants": [], "features": []}, {"string": " return __x ;", "links": [], "variables": ["__x"], "ids": [], "nodeId": 1, "featuresSelf": ["return"], "operators": [], "constants": [], "features": []}, {"string": " return __x ;", "links": [], "variables": ["__x"], "ids": [], "nodeId": 2, "featuresSelf": ["return"], "operators": [], "constants": [], "features": []}, {"string": "t;", "links": [], "variables": [], "ids": [], "nodeId": 3, "featuresSelf": [], "operators": [], "constants": ["0"], "features": []}, {"string": "char s[1000];", "links": [], "variables": ["s"], "ids": [], "nodeId": 4, "featuresSelf": [], "operators": [], "constants": ["1000"], "features": []}, {"string": "scanf", "links": [], "variables": ["t"], "ids": [], "nodeId": 5, "featuresSelf": ["in"], "operators": ["&"], "constants": ["%d,"], "features": []}, {"string": "getchar", "links": [], "variables": ["getchar"], "ids": [], "nodeId": 6, "featuresSelf": [], "operators": [], "constants": [], "features": []}, {"string": " while ( t -- )", "links": [], "variables": ["t"], "ids": [], "nodeId": 7, "featuresSelf": ["cn", "loop"], "operators": ["--"], "constants": [], "features": []}, {"string": "int a[126];", "links": [], "variables": ["a"], "ids": ["lp"], "nodeId": 8, "featuresSelf": [], "operators": [], "constants": ["126", "0"], "features": []}, {"string": "gets", "links": [], "variables": ["s"], "ids": ["lp"], "nodeId": 9, "featuresSelf": ["in"], "operators": [], "constants": [], "features": []}, {"string": " s [ i ] != '\\0' ;", "links": [], "variables": ["s", "i"], "ids": ["lp"], "nodeId": 10, "featuresSelf": [], "operators": ["!="], "constants": ["0", "'\\0'"], "features": []}, {"string": null, "links": [], "variables": [], "ids": ["lp"], "nodeId": 11, "featuresSelf": ["cn"], "operators": [], "constants": [], "features": []}, {"string": null, "links": [], "variables": ["i"], "ids": ["lp", "lp"], "nodeId": 12, "featuresSelf": [], "operators": ["++"], "constants": [], "features": []}, {"string": " ( * __ctype_b_loc ( ) ) [ ( int ) ( c ) ] & ( unsigned short int ) type ) # elif defined __USE_EXTERN_INLINES # define __isctype_f ( type ) __extern_inline int is ## type ( int __c ) __THROW { return ( * __ctype_b_loc ( ) ) [ ( int ) ( __c ) ] & ( unsigned short int ) _IS ## type ; } # endif # define __isascii ( c ) ( ( ( c ) & ~ 0x7f ) == 0 ) /* If C is a 7 bit value.  */ # define __toascii ( c ) ( ( c ) & 0x7f ) /* Mask off high bits.  */ # define __exctype ( name ) extern int name ( int ) __THROW /* The following names are all functions:\n     int isCHARACTERISTIC(int c);\n   which return nonzero iff C has CHARACTERISTIC.\n   For the meaning of the characteristic names, see the `enum' above.  */ __exctype ( isalnum ) ; __exctype ( isalpha ) ; __exctype ( iscntrl ) ; __exctype ( isdigit ) ; __exctype ( islower ) ; __exctype ( isgraph ) ; __exctype ( isprint ) ; __exctype ( ispunct ) ; __exctype ( isspace ) ; __exctype ( isupper ) ; __exctype ( isxdigit ) ; /* Return the lowercase version of C.  */ extern int tolower ( int __c ) __THROW ; /* Return the uppercase version of C.  */ extern int toupper ( int __c ) __THROW ; /* ISO C99 introduced one new function.  */ # ifdef __USE_ISOC99 __exctype ( isblank ) ; # endif # ifdef __USE_GNU /* Test C for a set of character classes according to MASK.  */ extern int isctype ( int __c , int __mask ) __THROW ; # endif # if defined __USE_MISC || defined __USE_XOPEN /* Return nonzero iff C is in the ASCII set\n   (i.e., is no more than 7 bits wide).  */ extern int isascii ( int __c ) __THROW ; /* Return the part of C that is in the ASCII set\n   (i.e., the low-order 7 bits of C).  */ extern int toascii ( int __c ) __THROW ; /* These are the same as `toupper' and `tolower' except that they do not\n   check the argument for being in the range of a `char'.  */ __exctype ( _toupper ) ; __exctype ( _tolower ) ; # endif /* Use X/Open or use misc.  */ /* This code is needed for the optimized mapping functions.  */ # define __tobody ( c , f , a , args ) ( __extension__ ( { int __res ; if ( sizeof ( c ) > 1 ) { if ( __builtin_constant_p ( c ) ) { int __c = ( c ) ; __res = __c < - 128 || __c > 255 ? __c : ( a ) [ __c ] ; } else __res = f args ; } else __res = ( a ) [ ( int ) ( c ) ] ; __res ; } ) ) # if ! defined __NO_CTYPE # ifdef __isctype_f __isctype_f ( alnum ) __isctype_f ( alpha ) __isctype_f ( cntrl ) __isctype_f ( digit ) __isctype_f ( lower ) __isctype_f ( graph ) __isctype_f ( print ) __isctype_f ( punct ) __isctype_f ( space ) __isctype_f ( upper ) __isctype_f ( xdigit ) # ifdef __USE_ISOC99 __isctype_f ( blank ) # endif # elif defined __isctype # define isalnum ( c ) __isctype ( ( c ) , _ISalnum ) # define isalpha ( c ) __isctype ( ( c ) , _ISalpha ) # define iscntrl ( c ) __isctype ( ( c ) , _IScntrl ) # define isdigit ( c ) __isctype ( ( c ) , _ISdigit ) # define islower ( c ) __isctype ( ( c ) , _ISlower ) # define isgraph ( c ) __isctype ( ( c ) , _ISgraph ) # define isprint ( c ) __isctype ( ( c ) , _ISprint ) # define ispunct ( c ) __isctype ( ( c ) , _ISpunct ) # define isspace ( c ) __isctype ( ( c ) , _ISspace ) # define isupper ( c ) __isctype ( ( c ) , _ISupper )", "links": [14, 15], "variables": [], "ids": ["lp", "lp"], "nodeId": 13, "featuresSelf": ["icn"], "operators": ["*"], "constants": [], "features": []}, {"string": null, "links": [], "variables": ["_ISupper"], "ids": ["lp", "lp"], "nodeId": 14, "featuresSelf": [], "operators": [], "constants": [], "features": []}, {"string": " s [ i ] + 32 ;", "links": [], "variables": ["__ctype_b_loc", "s", "i"], "ids": ["lp", "lp"], "nodeId": 15, "featuresSelf": [], "operators": ["", "+"], "constants": ["32"], "features": []}, {"string": " k = s [ i ] ;", "links": [], "variables": ["s", "i"], "ids": ["lp", "lp"], "nodeId": 16, "featuresSelf": [], "operators": [], "constants": [], "features": []}, {"string": " a [ k ] = 1 ;", "links": [], "variables": [], "ids": ["lp", "lp"], "nodeId": 17, "featuresSelf": [], "operators": [], "constants": ["1"], "features": []}, {"string": " c <= 'z' ;", "links": [], "variables": ["c"], "ids": ["lp"], "nodeId": 18, "featuresSelf": [], "operators": ["<="], "constants": ["'a'", "'z'"], "features": []}, {"string": null, "links": [], "variables": [], "ids": ["lp"], "nodeId": 19, "featuresSelf": ["cn"], "operators": [], "constants": [], "features": []}, {"string": null, "links": [], "variables": ["c"], "ids": ["lp", "lp"], "nodeId": 20, "featuresSelf": [], "operators": ["++"], "constants": [], "features": []}, {"string": " p = c ;", "links": [], "variables": ["c"], "ids": ["lp", "lp"], "nodeId": 21, "featuresSelf": [], "operators": [], "constants": [], "features": []}, {"string": " a [ p ] == 0 )", "links": [], "variables": ["a", "p"], "ids": ["lp", "lp"], "nodeId": 22, "featuresSelf": ["icn"], "operators": ["=="], "constants": ["0"], "features": []}, {"string": "printf", "links": [], "variables": ["c"], "ids": ["lp", "lp", "if"], "nodeId": 23, "featuresSelf": ["out"], "operators": [], "constants": ["%c\\n,"], "features": []}, {"string": " break ;", "links": [], "variables": [], "ids": ["lp", "lp", "if"], "nodeId": 24, "featuresSelf": ["break"], "operators": [], "constants": [], "features": []}, {"string": " c > 'z' )", "links": [], "variables": ["c"], "ids": ["lp"], "nodeId": 25, "featuresSelf": ["icn", "out"], "operators": [">"], "constants": ["'z'", "~\\n)"], "features": []}, {"string": " return 0 ;", "links": [], "variables": [], "ids": [], "nodeId": 26, "featuresSelf": ["return"], "operators": [], "constants": ["0"], "features": []}], "features": [{"controlContextEC": [":", ":", ":", ":", ":", ":", ":", ":", ":", ":0", ":1000", ":1;&;%d,", ":", ":1;--;", "lp:1260", "lp:", "lp:2;!=;0'\\0'", "lp:", "lplp:1;++;", "lplp:0;*;", "lplp:", "lplp:3;;3;+;32", "lplp:", "lplp:1", "lp:1;<=;'a''z'", "lp:", "lplp:1;++;", "lplp:", "lplp:2;==;0", "lplpif:%c\\n,", "lplpif:", "lp:1;>;'z'~\\n)", ":0"], "expr": ["", "", "", "", "", "", "", "", "", "0", "1000", "1;&;%d,", "", "1;--;", "1260", "", "2;!=;0'\\0'", "", "1;++;", "0;*;", "", "3;;3;+;32", "", "1", "1;<=;'a''z'", "", "1;++;", "", "2;==;0", "%c\\n,", "", "1;>;'z'~\\n)", "0"], "basic": ["0", "1000", "&", "%d,", "--", "loop", "126", "0", "!=", "0", "'\\0'", "loop", "++", "*", "", "+", "32", "1", "<=", "'a'", "'z'", "loop", "++", "==", "0", "%c\\n,", ">", "'z'", "~\\n)", "0"], "exprDepend": ["1000#3;;3;+;32", "#3;;3;+;32", "2;!=;0'\\0'#3;;3;+;32", "2;!=;0'\\0'#3;;3;+;32", "1;++;#3;;3;+;32", "1260#1"], "controlContextBC": [":0", ":1000", ":&", ":%d,", ":--", "lp:126", "lp:0", "lp:!=", "lp:0", "lp:'\\0'", "lplp:++", "lplp:*", "lplp:", "lplp:+", "lplp:32", "lplp:1", "lp:<=", "lp:'a'", "lp:'z'", "lplp:++", "lplp:==", "lplp:0", "lplpif:%c\\n,", "lp:>", "lp:'z'", "lp:~\\n)", ":0"]}]}