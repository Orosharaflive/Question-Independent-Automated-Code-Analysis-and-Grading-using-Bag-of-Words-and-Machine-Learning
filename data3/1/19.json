{"nodes": [{"string": " return __x ;", "links": [], "variables": ["__x"], "ids": [], "nodeId": 0, "featuresSelf": ["return"], "operators": [], "constants": [], "features": []}, {"string": " return __x ;", "links": [], "variables": ["__x"], "ids": [], "nodeId": 1, "featuresSelf": ["return"], "operators": [], "constants": [], "features": []}, {"string": " return __x ;", "links": [], "variables": ["__x"], "ids": [], "nodeId": 2, "featuresSelf": ["return"], "operators": [], "constants": [], "features": []}, {"string": "t;", "links": [], "variables": [], "ids": [], "nodeId": 3, "featuresSelf": [], "operators": [], "constants": [], "features": []}, {"string": "scanf", "links": [], "variables": ["t"], "ids": [], "nodeId": 4, "featuresSelf": ["in"], "operators": ["&"], "constants": ["%d,"], "features": []}, {"string": "char str[1000];", "links": [], "variables": ["str"], "ids": [], "nodeId": 5, "featuresSelf": [], "operators": [], "constants": ["1000"], "features": []}, {"string": "getchar", "links": [], "variables": ["getchar"], "ids": [], "nodeId": 6, "featuresSelf": [], "operators": [], "constants": [], "features": []}, {"string": " while ( t -- )", "links": [], "variables": ["t"], "ids": [], "nodeId": 7, "featuresSelf": ["cn", "loop"], "operators": ["--"], "constants": [], "features": []}, {"string": "int b[26];", "links": [], "variables": ["b"], "ids": ["lp"], "nodeId": 8, "featuresSelf": [], "operators": [], "constants": ["26", "0"], "features": []}, {"string": "gets", "links": [], "variables": ["str"], "ids": ["lp"], "nodeId": 9, "featuresSelf": ["in"], "operators": [], "constants": [], "features": []}, {"string": "len;", "links": [], "variables": ["len", "str", "strlen"], "ids": ["lp"], "nodeId": 10, "featuresSelf": [], "operators": [], "constants": [], "features": []}, {"string": " i < len ;", "links": [], "variables": ["len", "i"], "ids": ["lp"], "nodeId": 11, "featuresSelf": [], "operators": ["<"], "constants": ["0"], "features": []}, {"string": null, "links": [], "variables": [], "ids": ["lp"], "nodeId": 12, "featuresSelf": ["cn"], "operators": [], "constants": [], "features": []}, {"string": null, "links": [], "variables": ["i"], "ids": ["lp", "lp"], "nodeId": 13, "featuresSelf": [], "operators": ["++"], "constants": [], "features": []}, {"string": " ( * __ctype_b_loc ( ) ) [ ( int ) ( c ) ] & ( unsigned short int ) type ) # elif defined __USE_EXTERN_INLINES # define __isctype_f ( type ) __extern_inline int is ## type ( int __c ) __THROW { return ( * __ctype_b_loc ( ) ) [ ( int ) ( __c ) ] & ( unsigned short int ) _IS ## type ; } # endif # define __isascii ( c ) ( ( ( c ) & ~ 0x7f ) == 0 ) /* If C is a 7 bit value.  */ # define __toascii ( c ) ( ( c ) & 0x7f ) /* Mask off high bits.  */ # define __exctype ( name ) extern int name ( int ) __THROW /* The following names are all functions:\n     int isCHARACTERISTIC(int c);\n   which return nonzero iff C has CHARACTERISTIC.\n   For the meaning of the characteristic names, see the `enum' above.  */ __exctype ( isalnum ) ; __exctype ( isalpha ) ; __exctype ( iscntrl ) ; __exctype ( isdigit ) ; __exctype ( islower ) ; __exctype ( isgraph ) ; __exctype ( isprint ) ; __exctype ( ispunct ) ; __exctype ( isspace ) ; __exctype ( isupper ) ; __exctype ( isxdigit ) ; /* Return the lowercase version of C.  */ extern int tolower ( int __c ) __THROW ; /* Return the uppercase version of C.  */ extern int toupper ( int __c ) __THROW ; /* ISO C99 introduced one new function.  */ # ifdef __USE_ISOC99 __exctype ( isblank ) ; # endif # ifdef __USE_GNU /* Test C for a set of character classes according to MASK.  */ extern int isctype ( int __c , int __mask ) __THROW ; # endif # if defined __USE_MISC || defined __USE_XOPEN /* Return nonzero iff C is in the ASCII set\n   (i.e., is no more than 7 bits wide).  */ extern int isascii ( int __c ) __THROW ; /* Return the part of C that is in the ASCII set\n   (i.e., the low-order 7 bits of C).  */ extern int toascii ( int __c ) __THROW ; /* These are the same as `toupper' and `tolower' except that they do not\n   check the argument for being in the range of a `char'.  */ __exctype ( _toupper ) ; __exctype ( _tolower ) ; # endif /* Use X/Open or use misc.  */ /* This code is needed for the optimized mapping functions.  */ # define __tobody ( c , f , a , args ) ( __extension__ ( { int __res ; if ( sizeof ( c ) > 1 ) { if ( __builtin_constant_p ( c ) ) { int __c = ( c ) ; __res = __c < - 128 || __c > 255 ? __c : ( a ) [ __c ] ; } else __res = f args ; } else __res = ( a ) [ ( int ) ( c ) ] ; __res ; } ) ) # if ! defined __NO_CTYPE # ifdef __isctype_f __isctype_f ( alnum ) __isctype_f ( alpha ) __isctype_f ( cntrl ) __isctype_f ( digit ) __isctype_f ( lower ) __isctype_f ( graph ) __isctype_f ( print ) __isctype_f ( punct ) __isctype_f ( space ) __isctype_f ( upper ) __isctype_f ( xdigit ) # ifdef __USE_ISOC99 __isctype_f ( blank ) # endif # elif defined __isctype # define isalnum ( c ) __isctype ( ( c ) , _ISalnum ) # define isalpha ( c ) __isctype ( ( c ) , _ISalpha )", "links": [15, 16], "variables": [], "ids": ["lp", "lp"], "nodeId": 14, "featuresSelf": ["icn"], "operators": ["*"], "constants": [], "features": []}, {"string": null, "links": [], "variables": ["_ISalpha"], "ids": ["lp", "lp"], "nodeId": 15, "featuresSelf": [], "operators": [], "constants": [], "features": []}, {"string": null, "links": [], "variables": ["__ctype_b_loc", "str", "i"], "ids": ["lp", "lp"], "nodeId": 16, "featuresSelf": [], "operators": [""], "constants": [], "features": []}, {"string": "tolower", "links": [], "variables": ["str", "i", "tolower"], "ids": ["lp", "lp", "if"], "nodeId": 17, "featuresSelf": [], "operators": [], "constants": [], "features": []}, {"string": " str [ i ] - 'a' ]", "links": [], "variables": ["b", "str", "i"], "ids": ["lp", "lp", "if"], "nodeId": 18, "featuresSelf": [], "operators": ["-++", "-"], "constants": ["'a'"], "features": []}, {"string": "flag;", "links": [], "variables": ["flag"], "ids": ["lp"], "nodeId": 19, "featuresSelf": [], "operators": [], "constants": ["0"], "features": []}, {"string": " i < 26 ;", "links": [], "variables": ["i"], "ids": ["lp"], "nodeId": 20, "featuresSelf": [], "operators": ["<"], "constants": ["0", "26"], "features": []}, {"string": null, "links": [], "variables": [], "ids": ["lp"], "nodeId": 21, "featuresSelf": ["cn"], "operators": [], "constants": [], "features": []}, {"string": null, "links": [], "variables": ["i"], "ids": ["lp", "lp"], "nodeId": 22, "featuresSelf": [], "operators": ["++"], "constants": [], "features": []}, {"string": " b [ i ] == 0 )", "links": [], "variables": ["b", "i"], "ids": ["lp", "lp"], "nodeId": 23, "featuresSelf": ["icn"], "operators": ["=="], "constants": ["0"], "features": []}, {"string": " flag = 1 ;", "links": [], "variables": [], "ids": ["lp", "lp", "if"], "nodeId": 24, "featuresSelf": [], "operators": [], "constants": ["1"], "features": []}, {"string": " break ;", "links": [], "variables": [], "ids": ["lp", "lp", "if"], "nodeId": 25, "featuresSelf": ["break"], "operators": [], "constants": [], "features": []}, {"string": " 'A' + i )", "links": [], "variables": ["flag", "i"], "ids": ["lp"], "nodeId": 26, "featuresSelf": ["icn", "out", "out"], "operators": ["+"], "constants": ["%c\\n,", "'A'", "~\\n)"], "features": []}], "features": [{"controlContextEC": [":", ":", ":", ":", ":", ":", ":", ":", ":", ":", ":1;&;%d,", ":1000", ":", ":1;--;", "lp:260", "lp:", "lp:", "lp:2;<;0", "lp:", "lplp:1;++;", "lplp:0;*;", "lplp:", "lplp:3;;", "lplpif:", "lplpif:3;-++;3;-;'a'", "lp:0", "lp:1;<;026", "lp:", "lplp:1;++;", "lplp:2;==;0", "lplpif:1", "lplpif:", "lp:2;+;%c\\n,'A'~\\n)"], "expr": ["", "", "", "", "", "", "", "", "", "", "1;&;%d,", "1000", "", "1;--;", "260", "", "", "2;<;0", "", "1;++;", "0;*;", "", "3;;", "", "3;-++;3;-;'a'", "0", "1;<;026", "", "1;++;", "2;==;0", "1", "", "2;+;%c\\n,'A'~\\n)"], "basic": ["&", "%d,", "1000", "--", "loop", "26", "0", "<", "0", "loop", "++", "*", "", "-++", "-", "'a'", "0", "<", "0", "26", "loop", "++", "==", "0", "1", "+", "%c\\n,", "'A'", "~\\n)"], "exprDepend": ["2;<;0#1;<;026", "1;++;#1;<;026", "3;;#1;<;026", "#1;<;026", "3;-++;3;-;'a'#1;<;026", "0#1"], "controlContextBC": [":&", ":%d,", ":1000", ":--", "lp:26", "lp:0", "lp:<", "lp:0", "lplp:++", "lplp:*", "lplp:", "lplpif:-++", "lplpif:-", "lplpif:'a'", "lp:0", "lp:<", "lp:0", "lp:26", "lplp:++", "lplp:==", "lplp:0", "lplpif:1", "lp:+", "lp:%c\\n,", "lp:'A'", "lp:~\\n)"]}]}