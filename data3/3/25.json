{"nodes": [{"string": " return __x ;", "links": [], "variables": ["__x"], "ids": [], "nodeId": 0, "featuresSelf": ["return"], "operators": [], "constants": [], "features": []}, {"string": " return __x ;", "links": [], "variables": ["__x"], "ids": [], "nodeId": 1, "featuresSelf": ["return"], "operators": [], "constants": [], "features": []}, {"string": " return __x ;", "links": [], "variables": ["__x"], "ids": [], "nodeId": 2, "featuresSelf": ["return"], "operators": [], "constants": [], "features": []}, {"string": "int;", "links": [], "variables": ["int"], "ids": [], "nodeId": 3, "featuresSelf": [], "operators": [], "constants": [], "features": []}, {"string": "scanf", "links": [], "variables": ["n"], "ids": [], "nodeId": 4, "featuresSelf": ["in"], "operators": ["&"], "constants": ["%ld,"], "features": []}, {"string": "int;", "links": [], "variables": ["int", "n"], "ids": [], "nodeId": 5, "featuresSelf": [], "operators": [], "constants": [], "features": []}, {"string": " sum = 0 ;", "links": [], "variables": [], "ids": [], "nodeId": 6, "featuresSelf": [], "operators": [], "constants": ["0"], "features": []}, {"string": " i < n ;", "links": [], "variables": ["n", "i"], "ids": [], "nodeId": 7, "featuresSelf": [], "operators": ["<"], "constants": ["0"], "features": []}, {"string": null, "links": [], "variables": [], "ids": [], "nodeId": 8, "featuresSelf": ["cn"], "operators": [], "constants": [], "features": []}, {"string": null, "links": [], "variables": ["i"], "ids": ["lp"], "nodeId": 9, "featuresSelf": [], "operators": ["++"], "constants": [], "features": []}, {"string": "scanf", "links": [], "variables": ["a", "i"], "ids": ["lp"], "nodeId": 10, "featuresSelf": ["in"], "operators": ["&"], "constants": ["%ld,"], "features": []}, {"string": " sum += a [ i ] ;", "links": [], "variables": ["a", "i", "sum"], "ids": ["lp"], "nodeId": 11, "featuresSelf": [], "operators": ["+="], "constants": [], "features": []}, {"string": " sum == ( ( n * ( n + 1 ) ) / 2 ) )", "links": [13, 18], "variables": [], "ids": [], "nodeId": 12, "featuresSelf": ["icn"], "operators": ["=="], "constants": [], "features": []}, {"string": " ( n * ( n + 1 ) ) / 2 )", "links": [14, 15], "variables": [], "ids": [], "nodeId": 13, "featuresSelf": [], "operators": ["/"], "constants": [], "features": []}, {"string": null, "links": [], "variables": [], "ids": [], "nodeId": 14, "featuresSelf": [], "operators": [], "constants": ["2"], "features": []}, {"string": " n * ( n + 1 ) )", "links": [16, 17], "variables": [], "ids": [], "nodeId": 15, "featuresSelf": [], "operators": ["*"], "constants": [], "features": []}, {"string": " n + 1 )", "links": [], "variables": ["n"], "ids": [], "nodeId": 16, "featuresSelf": [], "operators": ["+"], "constants": ["1"], "features": []}, {"string": null, "links": [], "variables": ["n"], "ids": [], "nodeId": 17, "featuresSelf": [], "operators": [], "constants": [], "features": []}, {"string": null, "links": [], "variables": ["sum"], "ids": [], "nodeId": 18, "featuresSelf": [], "operators": [], "constants": [], "features": []}, {"string": "printf", "links": [], "variables": [], "ids": ["if"], "nodeId": 19, "featuresSelf": ["out"], "operators": [], "constants": ["%YES\\n)"], "features": []}, {"string": "printf", "links": [], "variables": [], "ids": [], "nodeId": 20, "featuresSelf": ["out"], "operators": [], "constants": ["NO\\n)"], "features": []}, {"string": " return 0 ;", "links": [], "variables": [], "ids": [], "nodeId": 21, "featuresSelf": ["return"], "operators": [], "constants": ["0"], "features": []}], "features": [{"controlContextEC": [":", ":", ":", ":", ":", ":", ":", ":", ":", ":", ":1;&;%ld,", ":", ":0", ":2;<;0", ":", "lp:1;++;", "lp:2;&;%ld,", "lp:3;+=;", ":0;==;", ":0;/;", ":2", ":0;*;", ":1;+;1", ":", ":", "if:%YES\\n)", ":NO\\n)", ":0"], "expr": ["", "", "", "", "", "", "", "", "", "", "1;&;%ld,", "", "0", "2;<;0", "", "1;++;", "2;&;%ld,", "3;+=;", "0;==;", "0;/;", "2", "0;*;", "1;+;1", "", "", "%YES\\n)", "NO\\n)", "0"], "basic": ["&", "%ld,", "0", "<", "0", "loop", "++", "&", "%ld,", "+=", "==", "/", "2", "*", "+", "1", "%YES\\n)", "NO\\n)", "0"], "exprDepend": [], "controlContextBC": [":&", ":%ld,", ":0", ":<", ":0", "lp:++", "lp:&", "lp:%ld,", "lp:+=", ":==", ":/", ":2", ":*", ":+", ":1", "if:%YES\\n)", ":NO\\n)", ":0"]}]}